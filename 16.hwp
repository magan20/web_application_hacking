16. 애플리케이션 아키텍처 공격
- 애플리케이션 아키텍처: 애플리케이션 아키텍처는 일반적으로 애플리케이션 전체의 구조, 공통된 방식(메커니즘) 이라고 정의할 수 있다. 즉, 시스템의 애플리케이션이 공통적으로 이용할 수 있는 사용자 인터페이스 구조나 데이터베이스 접근방식 등 시스템의 기반이 되는 부분을 말한다.
- 많이 사용하고 있는 다중 계층 방식의 구조에서 계층 간의 분장이 제대로 이뤄지지 않으면 한 계층에서 존재하는 결함을 바탕으로 다른 계층을 공략할 수도 있고 결국엔 애플리케이션 전체를 공력할 수 있는 경우가 많다.
- 하나의 인프라스트렉처에서 여러개의 애플리케이션이 호스팅되고 있는 경우 하나의 애플리케이션의 결함이 다른 고객의 애플리케이션까지도 공격에 노출되게 할 수 있다.

계층적 아키텍처
    - 많은 웹 애플리케이션이 다중 계층 아키텍처를 채택해서 애플리케이션의 사용자 인터페이스, 비즈니스 로직, 데이터 저장이 다단계로 나누어져 있고, 각 계층은 다른 기술을 사용하거나 물리적으로 다른 컴퓨터에서 실행되고 있다.(즉 각 계층을 독립적이다.)
    - 보편적인 심층 아키텍처는 다음의 계층으로 되어있다.
        - 프레젠테이션 계층: 애플리케이션의 인터페이스를 구현
        - 애플리케이션 계층: 핵심 비즈니스 로직을 구현
        - 데이터 계층: 테이터 저장과 애플리케이션 데이터의 처리를 담당
    
    - 실제 현실에서는 좀더 세부적으로 나누어진 계층을 사용한다.
        - 애플리케이션 계층(tomcat)
        - 프레젠테이션 계층(webwork)
        - 승인과 인증 계층(jaas, acegi)
        - 핵심 애플리케이션 프레임워크(struts, spring)
        - 비즈니스 로직 계층(엔터프라이즈 자바 빈즈)
        - 데이터베이서 객체 관계 매핑(hibernate)
        - 데이터베이스 jdbc 콜
        - 데이터베이스 서버
    - 다중 계층 아키텍처는 복잡한 처리 작업을 모듈화 된 기능 컴포넌트로 나누어 애플리케이션 개발을 관리하거나 버그를 줄이는데 엄청난 장점을 가져다 준다.
    - 또 비슷한 기능을 가진 애플리케이션을 개발할 때 재사용하기도 쉽다.
    - 사용될 기술을 대체할 때도 각각의 컴포넌트만 대체하면 되므로 다른 계층에 영향을 거의 주지않을 수 있다.
    
    다층 아키텍처 공격
        - 다중 계층 모델을 잘 이해하면 점근 제어나 입력 값 검증과 같은 다른 보안 대책이 어느 계층에 구현되었는지 확인하기 쉽고, 이런 대책들이 어떻게 여러 계층에서 나눠서 수행되는지 이해할 수 있다.
        - 제대로 설계되지 않은 아케텍처를 공격하는 방식은 크게 세 종류가 있다.
            - 1. 한 계층에서 다른 계층으로 공격해 나갈 때 다른 계층 간의 신뢰 관계를 공략해 볼 수 있다.
            - 2. 다른 계층이 부적절하게 업무 분장돼있다면 한 계층의 결함을 발판으로 다른 계층의 보아나 조치들을 바로 우회해볼 수 있다.
            - 3. 한 계층에 대해 제한적인 성공을 거둔 뒤에 즉시 다른 계층을 담당하고 있는 시스템 인프라를 공격해볼 수 있고, 이를 이용해 다른 계층으로 공격을 확산해볼 수 있다.
        
        계층 간 신뢰 관계 공략
            - 애플리케이션의 각 계층들이 서로를 특정한 방식으로 신뢰하고 있을 수 있다.
            - 이런 상황에서 신뢰 관계를 공략해서 한 계층에서 다른 계층으로 공격을 진행할 수도 있다.
            - 흔히 볼 수 있는 신뢰관계는 애플리케이션 계층이 사용자 접근을 전적으로 담당하고 있는 경우로, 이 계층이 사용자 인증과 셰션관리, 측정 사용자의 요청이 허락될 수 있는 것인지를 결정하는 모든 로직을 구현하고 있다.
            - 그 계층이 일단 어떤 요청을 허용하면 이 계층은 다른 계층에 요청된 액션을 수행하게 관련 명령을 보낸다. 명령을 받은 다음 계층은 접근 통제를 잘 확인했으리라고 신뢰하고 모든 명령을 의심 없이 수행한다.
            - 계층 간 신뢰 관계에서 어떤 한 계층에 프로그래밍 에러가 있다면 이는 다른 계층의 비정상적인 행동으로 귀결될 수 있다.
            
        다른 계층 파괴
            - 애플리케이션의 계층 간 분리가 게대로 되어있지 않은 경우 공격자는 한 계층을 공략해서 다른 계층에 구현돼있는 보안 대책을 바로 무력화 시켜서 그 계층이 담당하고 있는 데이터 접근이나 다른 행위를 수행하게 할 수도 있다.
            - 이런 종류의 취약점은 여러 계층이 개념적으로는 분리되어있지만 물리적으로는 한 컴퓨터에 구현돼있는 상황에서 가끔 발생한다.
            - 예를 들어 LAMP 서버를 사용한 애플리케이션이 있다.
        
        다른 계층 공격
            - 애플리케이션의 한 계층을 성공적으로 공략한 사용자는 가끔 애플리케이션의 다른 계층에 대한 인프라 계층의 공격을 실행해볼 수 있다.
            - 인프라 계층으로부터 애플리케이션의 어떤 계층이라도 공격에 성공하면 해당 계층을 완전히 장악하게 되는 경우가 많다.
            - 애플리케이션의 한 계층을 장악한 공격자는 다른 계층으로 공격을 확대하고 다른 시스템이나 사용자 PC로 공격을 확대할 수 있다.
            - 이렇게 공격을 확대해 나가는데 일반적인 경로로 서로 다른 보안 레벨의 네트워크 접점에 위치한 호스트들이 사용된다.
    
    계층화된 구조 보호
        - 다중 계층 구조는 어떤 공격에 대한 영행을 부분적으로 제한하기 때문에 조심스럽게 구현만 한다면 애플리케이션의 보안을 크게 증진시킨다.
        - 안전한 아키텍처에서는 한 계층을 공략했다고 해도 데이터나 처리 과정 일부를 장악할 뿐 제한적인 영향만 가져온다.
        
        신뢰 관계 최소화
            - 가능한 한 각 계층은 승인되지 않은 행동들을 방어하기 위한 자체적인 방어 체계를 구현해야 하고 스스로 차단할 수 있는 보안 위협을 애플리케이션의 다른 계층에서 차단해주기를 바래서는 안된다.
            - 사례
                - /admin url 경로에 대해 요청 주체가 누군지 살펴본다.
                - 각 계정마다 데이터베이스에 접근할 수 있는 권한을 나눈다.
                - 운영체게의 계정을 최소화한다.
        
        다른 컴포넌트 분리
            - 가능한 한 각 계층은 의도한 방식 이외에는 서로 간에 상호작용이 없게 최대한 분리한다.
            - 이 목적을 효과적으로 구현하기 위해서 떄로는 서로 다른 컴포넌트를 물리적으로 다른 호스트에서 실행하는 것이 필요할 수도 있다.
            - 사례
                - 한 계층에 의해 사용되는 파일을 다른 계층이 읽거나 쓸 수 없게 한다.
                - 서로 다른 인프라 컴포넌트 간의 네트워크 계층 접근은 그 계층들이 상호 통신하게 허용된 서비스만을 사용하게 필터링한다.
        
        심도 있는 방어 체계 적용
            - 사례
                - 호스트의 모든 계층은 설정이나 취약점 패키 등의 측면에서 보안이 강화돼야 한다.
                - 애플리케이션에 계속 사용되어야 할 민감한 데이터가 있다면 이를 암호화해서 그 계층이 공략되더라도 정보가 노출되지 않게 한다.
        
공유 호스팅과 애플리케이션 서비스 공급자
- 많은 기업들이 외부 서비스 공급자의 도움으로 웹 애플리케이션을 대중에 제공하고 있다.
- 이런 계약은 단순히 웹과 데이터베이스 서버를 사용할 수 있게 하는 단순 호스팅에서부터 애플리케이션을 직접 관리해 주는 완전한 애플리케이션 서비스 공급자(ASP)에 이르기까지 다양하다
- 이런 서비스를 사용하고자 하는 기업이라면 다음과 같은 위협에 대해 충분히 고려해야 한다.
    - 서비스 공급자의 어떤 한 악의적인 고객이 다른 기업의 애플리케이션과 데이터에 어떤 간섭을 하려 할 수 있다.
    - 한 고객이 아무 생각없이 취약한 애플리케이션을 설치하면 이를 통해 공유된 인프라를 공략하고 다른 기업의 애플리케이션과 데이터를 공격할 수 있다.

    가상 호스팅
        - 단순한 공유 호스팅의 경우 한 웹 서버를 써서 몇 개의 가상 웹사이트를 다른 도메인명으로 호스팅하게 설정할 수 있다. -> host 헤더를 써서 가능
        - 브라우저가 HTTP 요청을 보낼 때 Host 헤더에 관련 url을 담고 있는 도메인명을 담아서 그 도메인명에 연관된 IP주소로 요청을 보낸다.
        - 여러 개의 도메인명이 같은 IP주소로 되어 있더라도 서버는 헤더 정보를 통해 어느 웹사이트에 대한 요청인지 판단할 수 있다.
    
    공유된 애플리케이션 서비스
        - 많은 애플리케이션 서비스 공급자(ASP)는 고객의 사용에 맞게 수정할 수 있는 기성 애플리케이션을 대개 보유하고 있다. 이런 모델은 많은 수의 기업이 각기 고객에게 매우 다양한 기능의 복잡한 애플리케이션을 사용해서 기본적으로는 거의 동일한 기능을 제공하는 경우에 비용 대비 효율적이다.
        - ASP 서비스를 사용함으로써 기업들은 대규모 설치비나 유지비를 지불할 필요 없이 매우 잘 개발된 애플리케이션을 재빨리 획들할 수 있다.
    
    공유된 환경 공격
        - 공유된 호스팅과 ASP 환경은 이런 공유된 인프라 내에 있는 하나 이상의 애플리케이션을 공격할 수 있는 새로운 종류의 잠재적인 취약점을 가져왔다.
        
        접근 매커니즘 대상 공격


new thing
- it 인프라: 애플리케이션을 가동시키기 위해 필요한 하드웨어나 os, 미들웨어, 네트워크 등 시스템의 기반을 말한다. 구성요소로는 하드웨어, 운영체제, 네트워크, 미들웨어 등이 있다.
- 대부분의 애플리케이션이 데이터베이스를 DBA가 아니라 권한으로 접속하지만, 일반적으로 애플리케이션은 그 내부 데이터를 모두 읽거나 수정할 수 있는 어떤 특정 계정을 사용해서 접속한다.
- 레이스 컨디션 공격: 레이스 컨드션이란 공유 자원에 대해 여러 개의 프로세스가 동시에 접근하기 위해 경쟁하는 상태를 말한다. 이렇게 프로세스들이 경쟁하는 것을 이용하여 관리자 권한을 얻는 공격을 레이스 컨드션 공격이라 한다.


questions
- 인프라와 아키텍처 차이가 무엇인가? 인프라 안에 아키텍처가 포함되어 있는건가?
- 각각의 계층들은 하드웨어적으로 분리돼있고 네트워크를 통해 데이터를 주고받는 것인가?
- 애플리케이션을 관리하고 있는 운영체제도 따로 있나? 운영체제 계층은 무엇인가? 리눅스 서버같은 느낌인가?
- 애플리케이션의 운영체제를 공격한다는게 뭐임, 애플리케이션의 운영체제가 뭐임
- 인증할 때 핸드폰, 주민등록번호 등 여러 단계로 인증을 진행하는 다단계 인증은 아키텍처 계층 중 한 계층에서 일어나는 것인가?
- 도메인 명이 애플리케이션을 사용하는 기업이고, 호스트가 애플리케이션을 호스팅해주는 서비스 공급자인가? 서비스 공급자는 tistory, navercafe같은 느낌인가?
- 공유된 호스팅 환경에서 고객은 회사, 소매업자, 개인인가?